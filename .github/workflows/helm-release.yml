name: Release Helm Chart

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g. 0.3.2 for patch, 0.4.0 for minor)"
        required: true
        default: "0.3.2"

jobs:
  helm-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Calculate suggested next version
      id: next-version
      run: |
        echo "Calculating suggested next version..."
        
        # Get the latest release version from GitHub API
        LATEST_RELEASE=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases/latest" | jq -r '.tag_name // "v0.0.0"' | sed 's/^v//')
        echo "Latest released version: $LATEST_RELEASE"
        
        # Calculate next patch version
        IFS='.' read -ra VERSION_PARTS <<< "$LATEST_RELEASE"
        MAJOR=${VERSION_PARTS[0]:-0}
        MINOR=${VERSION_PARTS[1]:-0}
        PATCH=${VERSION_PARTS[2]:-0}
        
        # Increment patch version
        NEXT_PATCH=$((PATCH + 1))
        SUGGESTED_VERSION="$MAJOR.$MINOR.$NEXT_PATCH"
        
        echo "Suggested next version: $SUGGESTED_VERSION"
        echo "suggested-version=$SUGGESTED_VERSION" >> $GITHUB_OUTPUT
        
        # Also suggest next minor version
        NEXT_MINOR=$((MINOR + 1))
        SUGGESTED_MINOR="$MAJOR.$NEXT_MINOR.0"
        echo "Suggested next minor version: $SUGGESTED_MINOR"
        echo "suggested-minor=$SUGGESTED_MINOR" >> $GITHUB_OUTPUT
        
        echo ""
        echo "üöÄ VERSION SUGGESTIONS üöÄ"
        echo "=========================="
        echo "üì¶ For a patch release (bug fixes): $SUGGESTED_VERSION"
        echo "‚ú® For a minor release (new features): $SUGGESTED_MINOR"
        echo "üî• For a major release (breaking changes): $((MAJOR + 1)).0.0"
        echo ""
        echo "‚ÑπÔ∏è  Requested version for this release: ${{ github.event.inputs.version }}"

    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'

    - name: Install helm-unittest plugin
      run: |
        helm plugin install https://github.com/helm-unittest/helm-unittest

    - name: Create dist directory
      run: mkdir -p dist

    - name: Sync source files to chart
      run: |
        # Ensure chart src directory exists
        mkdir -p charts/logpilot/src

        # Copy source files to chart directory
        cp -r src/* charts/logpilot/src/
        cp pyproject.toml charts/logpilot/

        # Verify files were copied
        echo "Files in chart directory:"
        ls -la charts/logpilot/
        ls -la charts/logpilot/src/

    - name: Validate version is greater than latest release
      run: |
        VERSION="${{ github.event.inputs.version }}"
        echo "Validating that version $VERSION is greater than the latest released version..."
        
        # Get the latest release version from GitHub API
        LATEST_RELEASE=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases/latest" | jq -r '.tag_name // "v0.0.0"' | sed 's/^v//')
        echo "Latest released version: $LATEST_RELEASE"
        echo "Requested version: $VERSION"
        
        # Function to compare semantic versions
        version_compare() {
          # Split versions into arrays
          IFS='.' read -ra VER1 <<< "$1"
          IFS='.' read -ra VER2 <<< "$2"
          
          # Pad arrays to same length with zeros
          while [ ${#VER1[@]} -lt 3 ]; do VER1+=(0); done
          while [ ${#VER2[@]} -lt 3 ]; do VER2+=(0); done
          
          # Compare each component
          for i in {0..2}; do
            if [ ${VER1[i]} -gt ${VER2[i]} ]; then
              return 0  # VER1 > VER2
            elif [ ${VER1[i]} -lt ${VER2[i]} ]; then
              return 1  # VER1 < VER2
            fi
          done
          return 1  # VER1 == VER2
        }
        
        # Compare versions
        if version_compare "$VERSION" "$LATEST_RELEASE"; then
          echo "‚úÖ Version $VERSION is greater than latest release $LATEST_RELEASE"
        else
          echo "‚ùå Error: Version $VERSION must be greater than the latest release $LATEST_RELEASE"
          echo "Please choose a version number greater than $LATEST_RELEASE"
          exit 1
        fi

    - name: Update all version references
      run: |
        VERSION="${{ github.event.inputs.version }}"
        echo "Setting version to: $VERSION across all files using update script"

        # Make the update script executable and run it
        chmod +x scripts/update-versions.sh
        ./scripts/update-versions.sh "$VERSION"

        # Show git diff to see what changed
        echo ""
        echo "=== Git diff showing version changes ==="
        git diff --no-index /dev/null . | grep -E "^\+.*version|^\+.*__version__|^\+.*appVersion" || echo "No version changes detected in diff"

    - name: Run Helm tests before packaging
      run: |
        echo "Running Helm unit tests..."
        helm unittest charts/logpilot
        
        echo "Running Helm lint..."
        helm lint charts/logpilot
        
        echo "Testing template generation..."
        helm template test-release charts/logpilot > /dev/null
        echo "All Helm tests passed!"

    - name: Package Helm chart
      run: |
        helm package charts/logpilot --destination dist/
        echo "Packaged charts:"
        ls -la dist/

    - name: Generate Helm repository index
      run: |
        helm repo index dist/ --url https://github.com/${{ github.repository }}/releases/download/v${{ github.event.inputs.version }}/
        echo "Generated index.yaml:"
        cat dist/index.yaml

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.event.inputs.version }}
        name: Release v${{ github.event.inputs.version }}
        files: dist/*.tgz
        generate_release_notes: true

    - name: Setup Git for gh-pages
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"

    - name: Deploy to gh-pages
      run: |
        # Create gh-pages branch if it doesn't exist
        git checkout --orphan gh-pages || git checkout gh-pages

        # Remove all files except .git
        git rm -rf .

        # Copy index.yaml to root
        cp dist/index.yaml .

        # Commit and push
        git add index.yaml
        git commit -m "Update index.yaml for version v${{ github.event.inputs.version }}"
        git push -f origin gh-pages