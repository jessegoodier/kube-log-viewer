name: Release Helm Chart

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: "Version bump type"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
          - custom
      custom_version:
        description: "Custom version (only used if version_bump=custom, e.g. 0.3.2)"
        required: false
        default: ""

jobs:
  helm-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install bump2version
      run: |
        python -m pip install --upgrade pip
        pip install bump2version requests

    - name: Configure Git
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"

    - name: Get current and target version
      id: version
      run: |
        # Get current version from latest GitHub release
        CURRENT_VERSION=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases/latest" | python -c "
        import json, sys
        try:
            data = json.load(sys.stdin)
            print(data.get('tag_name', 'v0.0.0').lstrip('v'))
        except:
            print('0.0.0')
        ")
        
        echo "Current version: $CURRENT_VERSION"
        
        # Update .bumpversion.cfg with current version
        sed -i "s/current_version = .*/current_version = $CURRENT_VERSION/" .github/bumpversion.cfg
        
        # Calculate target version
        if [ "${{ github.event.inputs.version_bump }}" = "custom" ]; then
          if [ -z "${{ github.event.inputs.custom_version }}" ]; then
            echo "‚ùå Error: Custom version is required when version_bump=custom"
            exit 1
          fi
          TARGET_VERSION="${{ github.event.inputs.custom_version }}"
          echo "Using custom version: $TARGET_VERSION"
          
          # For custom version, update files directly
          bump2version --config-file=.github/bumpversion.cfg --new-version="$TARGET_VERSION" --allow-dirty patch
        else
          # Use bump2version for standard bumps
          echo "Performing ${{ github.event.inputs.version_bump }} version bump"
          bump2version --config-file=.github/bumpversion.cfg --allow-dirty ${{ github.event.inputs.version_bump }}
          TARGET_VERSION=$(grep "current_version" .github/bumpversion.cfg | cut -d' ' -f3)
        fi
        
        echo "Target version: $TARGET_VERSION"
        
        # Validate version is greater than current
        python - <<EOF
        from packaging import version
        current = "$CURRENT_VERSION"
        target = "$TARGET_VERSION"
        
        if version.Version(target) <= version.Version(current):
            print(f"‚ùå Error: Target version {target} must be greater than current version {current}")
            exit(1)
        else:
            print(f"‚úÖ Version {target} is valid and greater than {current}")
        EOF
        
        # Output versions for later steps
        echo "version=$TARGET_VERSION" >> $GITHUB_OUTPUT
        echo "current-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        
        # Show version suggestions
        python - <<EOF
        parts = "$CURRENT_VERSION".split('.')
        major, minor, patch = int(parts[0]), int(parts[1]), int(parts[2])
        
        print("")
        print("üöÄ VERSION SUGGESTIONS üöÄ")
        print("==========================")
        print(f"üì¶ Patch: {major}.{minor}.{patch + 1}")
        print(f"‚ú® Minor: {major}.{minor + 1}.0")
        print(f"üî• Major: {major + 1}.0.0")
        print("")
        print(f"‚ÑπÔ∏è  Selected version: $TARGET_VERSION")
        EOF

    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'

    - name: Install helm-unittest plugin
      run: |
        helm plugin install https://github.com/helm-unittest/helm-unittest

    - name: Create dist directory
      run: mkdir -p dist

    - name: Sync source files to chart
      run: |
        # Ensure chart src directory exists
        mkdir -p charts/logpilot/src

        # Copy source files to chart directory
        cp -r src/* charts/logpilot/src/
        cp pyproject.toml charts/logpilot/

        # Verify files were copied
        echo "Files in chart directory:"
        ls -la charts/logpilot/
        ls -la charts/logpilot/src/

    - name: Verify version updates
      run: |
        echo "=== Version Update Summary ==="
        echo "Updated files with version ${{ steps.version.outputs.version }}:"
        
        # Show what files were updated
        git diff --name-only || echo "No changes detected"
        
        # Show specific version changes
        echo ""
        echo "=== Version References Found ==="
        grep -r "${{ steps.version.outputs.version }}" . --include="*.py" --include="*.yaml" --include="*.yml" --include="*.toml" | head -10

    - name: Run Helm tests before packaging
      run: |
        echo "Running Helm unit tests..."
        helm unittest charts/logpilot
        
        echo "Running Helm lint..."
        helm lint charts/logpilot
        
        echo "Testing template generation..."
        helm template test-release charts/logpilot > /dev/null
        echo "All Helm tests passed!"

    - name: Package Helm chart
      run: |
        helm package charts/logpilot --destination dist/
        echo "Packaged charts:"
        ls -la dist/

    - name: Generate Helm repository index
      run: |
        helm repo index dist/ --url https://github.com/${{ github.repository }}/releases/download/v${{ steps.version.outputs.version }}/
        echo "Generated index.yaml:"
        cat dist/index.yaml

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.version.outputs.version }}
        name: Release v${{ steps.version.outputs.version }}
        files: dist/*.tgz
        generate_release_notes: true
        body: |
          ## Release v${{ steps.version.outputs.version }}
          
          **Version Bump:** ${{ github.event.inputs.version_bump }}
          **Previous Version:** ${{ steps.version.outputs.current-version }}
          **New Version:** ${{ steps.version.outputs.version }}
          
          This release was created using bump2version for automated version management.

    - name: Deploy to gh-pages
      run: |
        # Create gh-pages branch if it doesn't exist
        git checkout --orphan gh-pages || git checkout gh-pages

        # Remove all files except .git
        git rm -rf . 2>/dev/null || true

        # Copy index.yaml to root
        cp dist/index.yaml .

        # Commit and push
        git add index.yaml
        git commit -m "Update index.yaml for version v${{ steps.version.outputs.version }}"
        git push -f origin gh-pages