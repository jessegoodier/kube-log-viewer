name: Helm Chart Bumper

on:
  workflow_dispatch:

jobs:
  helm-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install uv
      run: |
        python -m pip install uv --break-system-packages

    - name: Get version from Python package
      id: version
      run: |
        uv venv
        source .venv/bin/activate
        uv pip install -e .
        echo "version=$(python -c "import logpilot; print(logpilot.__version__)")" >> $GITHUB_OUTPUT

    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.17.3'

    - name: Install helm-unittest plugin
      run: |
        helm plugin install https://github.com/helm-unittest/helm-unittest

    - name: Create dist directory
      run: mkdir -p dist

    - name: Update Helm chart version
      run: |
        # Update version in Chart.yaml
        sed -i "s/^version: .*/version: ${{ steps.version.outputs.version }}/" charts/logpilot/Chart.yaml
        sed -i "s/^appVersion: .*/appVersion: ${{ steps.version.outputs.version }}/" charts/logpilot/Chart.yaml
    - name: Sync source files to chart
      run: |
        # Ensure chart src directory exists
        mkdir -p charts/logpilot/src

        # Copy source files to chart directory
        cp -r src/* charts/logpilot/src/
        cp pyproject.toml charts/logpilot/

        # Verify files were copied
        echo "Files in chart directory:"
        ls -la charts/logpilot/
        ls -la charts/logpilot/src/

    - name: Verify version updates
      run: |
        echo "=== Version Update Summary ==="
        echo "Updated files with version ${{ steps.version.outputs.version }}:"
        
        # Show what files were updated
        git diff --name-only || echo "No changes detected"
        
        # Show specific version changes
        echo ""
        echo "=== Version References Found ==="
        grep -r "${{ steps.version.outputs.version }}" . --include="*.py" --include="*.yaml" --include="*.yml" --include="*.toml" | head -10

    - name: Run Helm tests before packaging
      run: |
        echo "Running Helm unit tests..."
        helm unittest charts/logpilot
        
        echo "Running Helm lint..."
        helm lint charts/logpilot
        
        echo "Testing template generation..."
        helm template test-release charts/logpilot > /dev/null
        echo "All Helm tests passed!"

    - name: Package Helm chart
      run: |
        helm package charts/logpilot --destination dist/
        echo "Packaged charts:"
        ls -la dist/

    - name: Fetch existing index
      run: |
        # Create a temporary directory for the existing index
        mkdir -p /tmp/helm-index
        # Try to fetch the existing index from gh-pages
        curl -s -o /tmp/helm-index/index.yaml "https://${{ github.repository_owner }}.github.io/$(echo ${{ github.repository }} | cut -d'/' -f2)/index.yaml" || touch /tmp/helm-index/index.yaml

    - name: Generate Helm repository index
      run: |
        # Generate new index and merge with existing one
        helm repo index dist/ --url https://github.com/${{ github.repository }}/releases/download/v${{ steps.version.outputs.version }}/ --merge /tmp/helm-index/index.yaml
        echo "Generated index.yaml:"
        cat dist/index.yaml

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.version.outputs.version }}
        name: Release v${{ steps.version.outputs.version }}
        files: dist/*.tgz
        generate_release_notes: true
        body: |
          ## Release v${{ steps.version.outputs.version }}
          
          This release was created automatically after version bump PR was merged.
          
          ### Changes
          - Updated Helm chart version to match Python package version
          - Published new Helm chart release

    - name: Deploy to gh-pages
      run: |
        # Create gh-pages branch if it doesn't exist
        git checkout --orphan gh-pages || git checkout gh-pages

        # Remove all files except .git
        git rm -rf . 2>/dev/null || true

        # Copy index.yaml to root
        cp dist/index.yaml .

        # Commit and push
        git add index.yaml
        git commit -m "Update index.yaml for version v${{ steps.version.outputs.version }}"
        git push -f origin gh-pages