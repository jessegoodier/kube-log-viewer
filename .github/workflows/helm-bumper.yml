name: Helm Chart Bumper

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: "Version bump type"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
          - custom
      custom_version:
        description: "Custom version (only used if version_bump=custom, e.g. 0.3.2)"
        required: false
        default: ""
      version_type:
        description: "Version type: 'release' for production (0.3.5) or 'dev' for development (0.3.5-dev)"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - release

jobs:
  helm-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install uv
      run: |
        python -m pip install uv --break-system-packages

    - name: Configure Git
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"

    - name: Get current and target version
      id: version
      run: |
        uv venv
        source .venv/bin/activate
        uv pip install -r .github/scripts/requirements.txt
        python .github/scripts/version_manager.py
      env:
        GITHUB_REPOSITORY: ${{ github.repository }}
        INPUT_VERSION_BUMP: ${{ github.event.inputs.version_bump }}
        INPUT_CUSTOM_VERSION: ${{ github.event.inputs.custom_version }}
        INPUT_VERSION_TYPE: ${{ github.event.inputs.version_type }}

    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.17.3'

    - name: Install helm-unittest plugin
      run: |
        helm plugin install https://github.com/helm-unittest/helm-unittest

    - name: Create dist directory
      run: mkdir -p dist

    - name: Update version in all files
      run: |
        source .venv/bin/activate
        echo "Updating version from current to ${{ steps.version.outputs.version }}"
        
        # Use bump-my-version to update all configured files
        # Since version_manager.py already calculated the exact target version,
        # we can use --new-version to set it directly
        bump-my-version bump --allow-dirty --new-version "${{ steps.version.outputs.version }}" patch
        
        # Verify the version was updated correctly
        echo "=== Files updated ==="
        git diff --name-only
        echo "=== Version in key files ==="
        grep -r "${{ steps.version.outputs.version }}" pyproject.toml src/__init__.py src/main.py || echo "Version check failed"

    - name: Commit version changes to main branch
      run: |
        # Add all the version-updated files
        git add pyproject.toml src/__init__.py src/main.py charts/logpilot/Chart.yaml charts/logpilot/pyproject.toml charts/logpilot/src/__init__.py k8s/deployment.yaml
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No version changes to commit"
        else
          # Commit the version changes
          git commit -m "Bump version to ${{ steps.version.outputs.version }}" \
                     -m "Version bump: ${{ github.event.inputs.version_bump }}" \
                     -m "Version type: ${{ github.event.inputs.version_type }}" \
                     -m "Previous version: ${{ steps.version.outputs.current-version }}" \
                     -m "" \
                     -m "ðŸ¤– Generated with [Claude Code](https://claude.ai/code)" \
                     -m "" \
                     -m "Co-Authored-By: Claude <noreply@anthropic.com>"
          
          # Push to main branch
          git push origin main
          echo "âœ… Version changes committed to main branch"
        fi

    - name: Sync source files to chart
      run: |
        # Ensure chart src directory exists
        mkdir -p charts/logpilot/src

        # Copy source files to chart directory
        cp -r src/* charts/logpilot/src/
        cp pyproject.toml charts/logpilot/

        # Verify files were copied
        echo "Files in chart directory:"
        ls -la charts/logpilot/
        ls -la charts/logpilot/src/

    - name: Verify version updates
      run: |
        echo "=== Version Update Summary ==="
        echo "Updated files with version ${{ steps.version.outputs.version }}:"
        
        # Show what files were updated
        git diff --name-only || echo "No changes detected"
        
        # Show specific version changes
        echo ""
        echo "=== Version References Found ==="
        grep -r "${{ steps.version.outputs.version }}" . --include="*.py" --include="*.yaml" --include="*.yml" --include="*.toml" | head -10

    - name: Run Helm tests before packaging
      run: |
        echo "Running Helm unit tests..."
        helm unittest charts/logpilot
        
        echo "Running Helm lint..."
        helm lint charts/logpilot
        
        echo "Testing template generation..."
        helm template test-release charts/logpilot > /dev/null
        echo "All Helm tests passed!"

    - name: Package Helm chart
      run: |
        helm package charts/logpilot --destination dist/
        echo "Packaged charts:"
        ls -la dist/

    - name: Generate Helm repository index
      run: |
        helm repo index dist/ --url https://github.com/${{ github.repository }}/releases/download/v${{ steps.version.outputs.version }}/
        echo "Generated index.yaml:"
        cat dist/index.yaml

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.version.outputs.version }}
        name: Release v${{ steps.version.outputs.version }}
        files: dist/*.tgz
        generate_release_notes: true
        body: |
          ## Release v${{ steps.version.outputs.version }}
          
          **Version Bump:** ${{ github.event.inputs.version_bump }}
          **Previous Version:** ${{ steps.version.outputs.current-version }}
          **New Version:** ${{ steps.version.outputs.version }}
          
          This release was created using bump-my-version for automated version management.

    - name: Deploy to gh-pages
      run: |
        # Create gh-pages branch if it doesn't exist
        git checkout --orphan gh-pages || git checkout gh-pages

        # Remove all files except .git
        git rm -rf . 2>/dev/null || true

        # Copy index.yaml to root
        cp dist/index.yaml .

        # Commit and push
        git add index.yaml
        git commit -m "Update index.yaml for version v${{ steps.version.outputs.version }}"
        git push -f origin gh-pages