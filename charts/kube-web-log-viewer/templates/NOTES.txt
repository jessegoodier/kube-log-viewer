1. Get the application URL by running these commands:
{{- if contains "ClusterIP" .Values.service.type }}
  export SERVICE_NAME=$(kubectl get svc --namespace {{ .Release.Namespace }} -l "{{ include "kube-web-log-viewer.selectorLabels" . }}" -o jsonpath="{.items[0].metadata.name}")
  export SERVICE_PORT=$(kubectl get svc --namespace {{ .Release.Namespace }} $SERVICE_NAME -o jsonpath="{.spec.ports[0].port}")
  echo "Visit http://127.0.0.1:{{ .Values.service.port }} to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $SERVICE_NAME {{ .Values.service.port }}:$SERVICE_PORT
{{- end }}

2. Configuration:
   - Log archival: {{ if .Values.previousPodLogs.enabled }}ENABLED{{ else }}DISABLED{{ end }}
   {{- if .Values.previousPodLogs.enabled }}
   - Log retention: {{ .Values.previousPodLogs.retentionMinutes }} minutes ({{ div .Values.previousPodLogs.retentionMinutes 1440 }} days)
   - Purge capability: {{ if .Values.previousPodLogs.allowPurge }}ENABLED{{ else }}DISABLED{{ end }}
   {{- end }}
   - API authentication: {{ if and .Values.auth.apiKey (ne .Values.auth.apiKey "no-key") }}ENABLED{{ else }}DISABLED{{ end }}
   {{- if and .Values.auth.apiKey (ne .Values.auth.apiKey "no-key") }}

   To access with API key, append ?api_key={{ .Values.auth.apiKey }} to the URL
   {{- end }}

3. Storage:
   {{- if eq .Values.storage.type "persistentVolume" }}
   - Using persistent volume ({{ .Values.storage.persistentVolume.size }})
   {{- else }}
   - Using emptyDir (logs will be lost on pod restart)
   {{- end }}

4. Troubleshooting:
   - Check pod status: kubectl get pods -n {{ .Release.Namespace }} -l "{{ include "kube-web-log-viewer.selectorLabels" . }}"
   - View logs: kubectl logs -n {{ .Release.Namespace }} -l "{{ include "kube-web-log-viewer.selectorLabels" . }}"
   - Check readiness: kubectl get pods -n {{ .Release.Namespace }} -l "{{ include "kube-web-log-viewer.selectorLabels" . }}" -o wide